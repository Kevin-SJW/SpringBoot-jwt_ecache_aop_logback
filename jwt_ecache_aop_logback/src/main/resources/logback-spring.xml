<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback</contextName>
    <!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
    <!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
    <!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->


    <!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，
    默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

    <!--定义常量参数-->
    <property name="log.path" value="./logs/springBoot" />
    <!-- 文件最大保存历史数量 -->
    <property name="max.history" value="30" />
    <!-- 活动文件的最大大小 -->
    <!--<property name="max.file.size" value="100MB" />-->
    <!-- 所有归档日志文件的总大小/容量 -->
    <property name="total.size.cap" value="1GB" />

    <!--输出到控制台-->
    <!--子节点一-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
         </filter>-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--输出到文件,rollingFileAppender用于切分文件日志-->
    <!-- INFO -->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 ，注意LOG_PATH是默认值，
            它的配置对应application.properties里的logging.path值-->
        <file>${LOG_PATH}/info/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${max.history}</maxHistory>
            <!-- 文件最大存储容量 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- DEBUG -->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 ，注意LOG_PATH是默认值，
            它的配置对应application.properties里的logging.path值-->
        <file>${LOG_PATH}/debug/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>debug/debug-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <MaxHistory>${max.history}</MaxHistory>
            <!-- 文件最大存储容量 -->
            <!--<totalSizeCap>${log.maxFileVolume}</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- WARN -->
    <appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 ，注意LOG_PATH是默认值，
            它的配置对应application.properties里的logging.path值-->
        <file>${LOG_PATH}/warn/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>warn/warn-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <MaxHistory>${max.history}</MaxHistory>
            <!-- 文件最大存储容量 -->
            <!--<totalSizeCap>${log.totalSizeCap}</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR -->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 ，注意LOG_PATH是默认值，
            它的配置对应application.properties里的logging.path值-->
        <file>${LOG_PATH}/error/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>error/error-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <MaxHistory>${max.history}</MaxHistory>
            <!-- 文件最大存储容量 -->
            <!--<totalSizeCap>${log.totalSizeCap}</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <logger name="org.springframework" additivity="false">
        <level value="ERROR" />
        <appender-ref ref="STDOUT" />
        <appender-ref ref="errorAppender" />
    </logger>

    <!-- 由于启动的时候，以下两个包下打印debug级别日志很多 ，所以调到ERROR-->
    <logger name="org.apache.tomcat.util" additivity="false">
        <level value="ERROR"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <!-- 默认spring boot导入hibernate很多的依赖包，启动的时候，会有hibernate相关的内容，直接去除 -->
    <logger name="org.hibernate.validator" additivity="false">
        <level value="ERROR"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="errorAppender"/>
    </logger>
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="warnAppender"/>
        <appender-ref ref="errorAppender"/>
    </root>


    <!--子节点二-->
    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性-->
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="infoAppender" />
    </root>

    <!-- logback为java中的包 -->
    <logger name="com.example.jwt.rest.system"/>
    <!--logback.LogbackDemo：类的全路径 -->
    <logger name="com.example.jwt.rest.system.LoggerController" level="WARN" additivity="false">
        <appender-ref ref="warnAppender"/>
    </logger>

    <logger name="com.example.jwt.rest.system"/>
    <!--logback.LogbackDemo：类的全路径 -->
    <logger name="com.example.jwt.rest.system.DepartmentRestController" level="INFO" additivity="false"><appender-ref ref="infoAppender"/></logger>
    <logger name="com.example.jwt.rest.system.PositionRestController" level="INFO" additivity="false"><appender-ref ref="infoAppender"/></logger>
    <logger name="com.example.jwt.rest.system.MenuRestController" level="INFO" additivity="false"><appender-ref ref="infoAppender"/></logger>
    <logger name="com.example.jwt.rest.system.AuthorityRestController" level="INFO" additivity="false"><appender-ref ref="infoAppender"/></logger>
    <logger name="com.example.jwt.rest.system.UserRestController" level="INFO" additivity="false"><appender-ref ref="infoAppender"/></logger>

        <!--<appender-ref ref="infoAppender"/>-->
    <!--</logger>-->

    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <logger name="com.example.jwt.rest.system" level="INFO" />
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.example.jwt.rest.system" level="ERROR" />
    </springProfile>
</configuration>